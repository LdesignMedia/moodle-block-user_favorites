{"version":3,"file":"favorites.min.js","sources":["../src/favorites.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tested in Moodle 3.5\n *\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n * @copyright 2018 MFreak.nl\n * @author    Luuk Verhoeven\n **/\n\n/* eslint no-unused-expressions: \"off\", no-console:off, no-invalid-this:\"off\",no-script-url:\"off\", block-scoped-var: \"off\" */\ndefine(['jquery', 'core/ajax', 'core/notification', 'core/log', 'core/sortable_list'],\nfunction ($, Ajax, Notification, Log, SortableList) {\n\n    /**\n     * Opts that are possible to set.\n     *\n     * @type {{id: number, debugjs: boolean}}\n     */\n    let opts = {\n        debugjs: true, id: 0, url: '', hash: ''\n    };\n\n    /**\n     * Set options base on listed options\n     * @param {object} options\n     */\n    const setOptions = function (options) {\n        \"use strict\";\n        let key, vartype;\n        for (key in opts) {\n            if (opts.hasOwnProperty(key) && options.hasOwnProperty(key)) {\n\n                // Casting to prevent errors.\n                vartype = typeof opts[key];\n                if (vartype === \"boolean\") {\n                    opts[key] = Boolean(options[key]);\n                } else if (vartype === 'number') {\n                    opts[key] = Number(options[key]);\n                } else if (vartype === 'string') {\n                    opts[key] = String(options[key]);\n                }\n                // Skip all other types.\n            }\n        }\n    };\n\n    const attachDragDropHandlers = function () {\n        $('ol#block_user_favorites-items > li').on(SortableList.EVENTS.DRAGEND, function(evt, info) {\n            if (info.positionChanged) {\n                favoritesModule.setOrder();\n            }\n            evt.stopPropagation();\n        });\n    };\n\n    const favoritesModule = {\n\n        /**\n         * Add or update a url\n         *\n         * @param {object} data\n         * @param {string} title\n         */\n        setUrl: function (data, title) {\n\n            Notification.confirm(M.util\n                    .get_string('javascript:set_title', 'block_user_favorites'),\n                '<input class=\"form-control\" id=\"favorite-url\" value=\"'\n                + title + '\">', M.util.get_string('javascript:yes', 'block_user_favorites'),\n                M.util.get_string('javascript:no', 'block_user_favorites'), function () {\n\n                    let request = Ajax.call([{\n                        methodname: 'block_user_favorites_set_url', args: {\n                            hash: data.hash, optional: {\n                                url: data.url,\n                            }, title: $('#favorite-url').val(), blockid: opts.id,\n                        }\n                    }]);\n\n                    request[0].done(function (response) {\n                        Log.log(response);\n                        favoritesModule.reload();\n                    }).fail(Notification.exception);\n                });\n        },\n\n        /**\n         * Add or update a url\n         */\n        setOrder: function () {\n            $('ol#block_user_favorites-items li').each(function (index) {\n                Ajax.call([{\n                    methodname: 'block_user_favorites_set_order', args: {\n                        hash: $(this).data('hash'), sortorder: index\n                    }\n                }]);\n            });\n        },\n\n        /**\n         * Delete a url\n         *\n         * @param {object} data\n         */\n        remove: function (data) {\n\n            let request = Ajax.call([{\n                methodname: 'block_user_favorites_delete_url', args: {\n                    hash: data.hash, blockid: opts.id,\n                }\n            }]);\n\n            request[0].done(function (response) {\n                Log.log(response);\n                favoritesModule.reload();\n            }).fail(Notification.exception);\n        },\n\n        /**\n         * Reload the block\n         */\n        reload: function () {\n\n            let request = Ajax.call([{\n                methodname: 'block_user_favorites_content', args: {\n                    url: opts.url, blockid: opts.id,\n                }\n            }]);\n\n            request[0].done(function (response) {\n                Log.log(response);\n                $('.block_user_favorites .content').html(response.content);\n                // Re-attach drag/drop callback on the new content to ensure sorting still works after content refresh\n                attachDragDropHandlers();\n            }).fail(Notification.exception);\n\n        },\n\n        /**\n         * Init event triggers.\n         */\n        init: function () {\n            Log.log('Init block_user_favorites');\n\n            $('.block_user_favorites').on('click', '#block_user_favorites_set', function () {\n\n                // Set current as favorite.\n                favoritesModule.setUrl({\n                    'hash': opts.hash, 'url': window.location.href,\n                }, $('title').text());\n\n            }).on('click', '#block_user_favorites_delete', function () {\n                // Delete current pages from favorites.\n                favoritesModule.remove({\n                    'hash': opts.hash,\n                });\n\n            }).on('click', '.fa-remove', function () {\n                // Remove a fav in the list.\n                favoritesModule.remove($(this).closest('li').data());\n\n            }).on('click', '.fa-edit', function () {\n                // Edit a fav int the list.\n                let data = $(this).parent().parent().data();\n                data.url = null;\n                favoritesModule.setUrl(data, $(this).parent().parent().find('a').text());\n            });\n            // Instantiate new SortableList component. this only needs to happen once (i.e. not on refresh again).\n            new SortableList('ol#block_user_favorites-items');\n            // Attach the drag/drop callbacks\n            attachDragDropHandlers();\n        }\n    };\n\n    return {\n        /**\n         * Init\n         *\n         * @param {object} args\n         */\n        initialise: function (args) {\n\n            // Load the args passed from PHP.\n            setOptions(args);\n\n            // Set internal debug console.\n            Log.log(opts.debugjs);\n\n            $.noConflict();\n            $(document).ready(function () {\n                Log.log('Block User Favorites v1.2');\n                favoritesModule.init();\n            });\n        }\n    };\n});\n"],"names":["define","$","Ajax","Notification","Log","SortableList","opts","debugjs","id","url","hash","attachDragDropHandlers","on","EVENTS","DRAGEND","evt","info","positionChanged","favoritesModule","setOrder","stopPropagation","setUrl","data","title","confirm","M","util","get_string","call","methodname","args","optional","val","blockid","done","response","log","reload","fail","exception","each","index","this","sortorder","remove","html","content","init","window","location","href","text","closest","parent","find","initialise","options","key","vartype","hasOwnProperty","Boolean","Number","String","setOptions","noConflict","document","ready"],"mappings":";;;;;;;;AAyBAA,wCAAO,CAAC,SAAU,YAAa,oBAAqB,WAAY,uBAChE,SAAUC,EAAGC,KAAMC,aAAcC,IAAKC,kBAO9BC,KAAO,CACPC,SAAS,EAAMC,GAAI,EAAGC,IAAK,GAAIC,KAAM,UA2BnCC,uBAAyB,WAC3BV,EAAE,sCAAsCW,GAAGP,aAAaQ,OAAOC,SAAS,SAASC,IAAKC,MAC9EA,KAAKC,iBACLC,gBAAgBC,WAEpBJ,IAAIK,sBAINF,gBAAkB,CAQpBG,OAAQ,SAAUC,KAAMC,OAEpBpB,aAAaqB,QAAQC,EAAEC,KACdC,WAAW,uBAAwB,wBACxC,wDACEJ,MAAQ,KAAME,EAAEC,KAAKC,WAAW,iBAAkB,wBACpDF,EAAEC,KAAKC,WAAW,gBAAiB,yBAAyB,WAE1CzB,KAAK0B,KAAK,CAAC,CACrBC,WAAY,+BAAgCC,KAAM,CAC9CpB,KAAMY,KAAKZ,KAAMqB,SAAU,CACvBtB,IAAKa,KAAKb,KACXc,MAAOtB,EAAE,iBAAiB+B,MAAOC,QAAS3B,KAAKE,OAIlD,GAAG0B,MAAK,SAAUC,UACtB/B,IAAIgC,IAAID,UACRjB,gBAAgBmB,YACjBC,KAAKnC,aAAaoC,eAOjCpB,SAAU,WACNlB,EAAE,oCAAoCuC,MAAK,SAAUC,OACjDvC,KAAK0B,KAAK,CAAC,CACPC,WAAY,iCAAkCC,KAAM,CAChDpB,KAAMT,EAAEyC,MAAMpB,KAAK,QAASqB,UAAWF,cAWvDG,OAAQ,SAAUtB,MAEApB,KAAK0B,KAAK,CAAC,CACrBC,WAAY,kCAAmCC,KAAM,CACjDpB,KAAMY,KAAKZ,KAAMuB,QAAS3B,KAAKE,OAI/B,GAAG0B,MAAK,SAAUC,UACtB/B,IAAIgC,IAAID,UACRjB,gBAAgBmB,YACjBC,KAAKnC,aAAaoC,YAMzBF,OAAQ,WAEUnC,KAAK0B,KAAK,CAAC,CACrBC,WAAY,+BAAgCC,KAAM,CAC9CrB,IAAKH,KAAKG,IAAKwB,QAAS3B,KAAKE,OAI7B,GAAG0B,MAAK,SAAUC,UACtB/B,IAAIgC,IAAID,UACRlC,EAAE,kCAAkC4C,KAAKV,SAASW,SAElDnC,4BACD2B,KAAKnC,aAAaoC,YAOzBQ,KAAM,WACF3C,IAAIgC,IAAI,6BAERnC,EAAE,yBAAyBW,GAAG,QAAS,6BAA6B,WAGhEM,gBAAgBG,OAAO,MACXf,KAAKI,SAAasC,OAAOC,SAASC,MAC3CjD,EAAE,SAASkD,WAEfvC,GAAG,QAAS,gCAAgC,WAE3CM,gBAAgB0B,OAAO,MACXtC,KAAKI,UAGlBE,GAAG,QAAS,cAAc,WAEzBM,gBAAgB0B,OAAO3C,EAAEyC,MAAMU,QAAQ,MAAM9B,WAE9CV,GAAG,QAAS,YAAY,eAEnBU,KAAOrB,EAAEyC,MAAMW,SAASA,SAAS/B,OACrCA,KAAKb,IAAM,KACXS,gBAAgBG,OAAOC,KAAMrB,EAAEyC,MAAMW,SAASA,SAASC,KAAK,KAAKH,eAGjE9C,aAAa,iCAEjBM,iCAID,CAMH4C,WAAY,SAAUzB,OA1JP,SAAU0B,aAErBC,IAAKC,YACJD,OAAOnD,KACJA,KAAKqD,eAAeF,MAAQD,QAAQG,eAAeF,OAGnDC,eAAiBpD,KAAKmD,KACN,YAAZC,QACApD,KAAKmD,KAAOG,QAAQJ,QAAQC,MACT,WAAZC,QACPpD,KAAKmD,KAAOI,OAAOL,QAAQC,MACR,WAAZC,UACPpD,KAAKmD,KAAOK,OAAON,QAAQC,QAgJnCM,CAAWjC,MAGX1B,IAAIgC,IAAI9B,KAAKC,SAEbN,EAAE+D,aACF/D,EAAEgE,UAAUC,OAAM,WACd9D,IAAIgC,IAAI,6BACRlB,gBAAgB6B"}